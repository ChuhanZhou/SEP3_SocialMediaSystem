@page "/Shield"
@using SEP3_Client.Data
@using SEP3_Client.Model.List.UserList
@using SEP3_Client.Model.Unit.Group
@using SEP3_Client.Model.Unit.User
@inject NavigationManager NavigationManager
@inject IClientModel ClientModel
<div style="float: left; width: 100%;height: auto;">
<div style="text-align: center;
         width: 800px;
         height: 800px;
         margin: auto;
         ">
    <button class="oi oi-chevron-left" style="float:left; text-align: left;height: 30px; background-color: #007bff" @onclick="back">
        Back
    </button>
    <button style="float:right; text-align: left;height: 30px; background-color: #8fd19e" @onclick="shieldFriends">
        Done
    </button>
     <div class="form-group">
            <form>
                @foreach (var friend in friendList.GetFriendSettingList())
                {
                    <input type="checkbox" checked="@hasPerson(friend.Id)" @onchange="@(() => ChooseMember(friend.Id))">
                    <img src="user.PNG" width="40px" height="40px">
                    @if (friend.GetNote() == null)
                    {
                        @getUserName(friend.GetId())
                    }
                    else
                    {
                        @friend.Note
                    }
                    <br/>
                }
            </form>
        </div>
</div>
</div>

@code {
    private List<string> disableList;
    private FriendSettingList friendList;
    public static string postInfo;

    protected override async Task OnInitializedAsync()
    {
        if (!MainLayout.IsLogin())
        {
            NavigationManager.NavigateTo("");
        }
        friendList = ClientModel.GetFriendSettingList().GetFriendSettingListByStatus(FriendSettingStatus.AGREE);
        disableList = new List<string>();
    }
    
    private string getUserName(string id)
    {
        return ClientModel.GetFriendById(id).GetUserName();
    }
    
    private void ChooseMember(string friendId)
    {
        if (hasPerson(friendId))
        {
            disableList.Remove(friendId);

        }
        else
        {
            disableList.Add(friendId);
        }
    }

    private bool hasPerson(string memberId)
    {
        foreach (var friendID in disableList)
        {
            if (friendID.Equals(memberId))
            {
                return true;
            }
        }
        return false;
    }


    private void back()
    {
        Moment.setIsPublic("Shield");
        Moment.postInfo = postInfo;
        NavigationManager.NavigateTo("/Moment");
    }

    private void shieldFriends()
    {
        Moment.setIsPublic("Shield");
        Moment.shieldList = disableList;
        Moment.postInfo = postInfo;
        NavigationManager.NavigateTo("/Moment");
    }

}